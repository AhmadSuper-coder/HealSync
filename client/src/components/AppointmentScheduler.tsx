import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\n\nconst appointmentFormSchema = z.object({\n  patientName: z.string().min(2, \"Patient name is required\"),\n  date: z.date({\n    required_error: \"Please select a date\",\n  }),\n  startTime: z.string().min(1, \"Start time is required\"),\n  endTime: z.string().min(1, \"End time is required\"),\n  notes: z.string().optional(),\n});\n\ntype AppointmentFormData = z.infer<typeof appointmentFormSchema>;\n\ninterface AppointmentSchedulerProps {\n  onSubmit?: (data: AppointmentFormData) => void;\n  initialData?: Partial<AppointmentFormData>;\n  isEditing?: boolean;\n}\n\nexport function AppointmentScheduler({ onSubmit, initialData, isEditing = false }: AppointmentSchedulerProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<AppointmentFormData>({\n    resolver: zodResolver(appointmentFormSchema),\n    defaultValues: {\n      patientName: initialData?.patientName || \"\",\n      date: initialData?.date || undefined,\n      startTime: initialData?.startTime || \"\",\n      endTime: initialData?.endTime || \"\",\n      notes: initialData?.notes || \"\",\n    },\n  });\n\n  // todo: remove mock functionality\n  const timeSlots = [\n    \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",\n    \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\",\n    \"17:00\", \"17:30\", \"18:00\"\n  ];\n\n  const handleSubmit = async (data: AppointmentFormData) => {\n    setIsSubmitting(true);\n    try {\n      console.log('Appointment scheduled:', data);\n      onSubmit?.(data);\n      toast({\n        title: isEditing ? \"Appointment Updated\" : \"Appointment Scheduled\",\n        description: `Appointment for ${data.patientName} has been ${isEditing ? 'updated' : 'scheduled'}.`,\n      });\n      if (!isEditing) {\n        form.reset();\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{isEditing ? \"Edit Appointment\" : \"Schedule New Appointment\"}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"patientName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Patient Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Search or enter patient name\" data-testid=\"input-patient-name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"date\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Date</FormLabel>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <FormControl>\n                        <Button\n                          variant={\"outline\"}\n                          className={cn(\n                            \"w-full pl-3 text-left font-normal\",\n                            !field.value && \"text-muted-foreground\"\n                          )}\n                          data-testid=\"button-date-picker\"\n                        >\n                          {field.value ? (\n                            format(field.value, \"PPP\")\n                          ) : (\n                            <span>Pick a date</span>\n                          )}\n                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                        </Button>\n                      </FormControl>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={field.value}\n                        onSelect={field.onChange}\n                        disabled={(date) =>\n                          date < new Date() || date < new Date(\"1900-01-01\")\n                        }\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"startTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Start Time</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-start-time\">\n                          <SelectValue placeholder=\"Select start time\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {timeSlots.map((time) => (\n                          <SelectItem key={time} value={time}>\n                            {time}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"endTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>End Time</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-end-time\">\n                          <SelectValue placeholder=\"Select end time\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {timeSlots.map((time) => (\n                          <SelectItem key={time} value={time}>\n                            {time}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Any special notes for this appointment\" data-testid=\"input-notes\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full\"\n              data-testid=\"button-schedule-appointment\"\n            >\n              {isSubmitting ? \"Scheduling...\" : isEditing ? \"Update Appointment\" : \"Schedule Appointment\"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n