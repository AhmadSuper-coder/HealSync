import { useState } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst medicineSchema = z.object({\n  name: z.string().min(1, \"Medicine name is required\"),\n  dosage: z.string().min(1, \"Dosage is required\"),\n  frequency: z.string().min(1, \"Frequency is required\"),\n  duration: z.string().min(1, \"Duration is required\"),\n});\n\nconst prescriptionFormSchema = z.object({\n  patientName: z.string().min(2, \"Patient name is required\"),\n  medicines: z.array(medicineSchema).min(1, \"At least one medicine is required\"),\n  instructions: z.string().optional(),\n  followUpDate: z.string().optional(),\n});\n\ntype PrescriptionFormData = z.infer<typeof prescriptionFormSchema>;\n\ninterface PrescriptionFormProps {\n  onSubmit?: (data: PrescriptionFormData) => void;\n  initialData?: Partial<PrescriptionFormData>;\n  isEditing?: boolean;\n}\n\nexport function PrescriptionForm({ onSubmit, initialData, isEditing = false }: PrescriptionFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<PrescriptionFormData>({\n    resolver: zodResolver(prescriptionFormSchema),\n    defaultValues: {\n      patientName: initialData?.patientName || \"\",\n      medicines: initialData?.medicines || [{ name: \"\", dosage: \"\", frequency: \"\", duration: \"\" }],\n      instructions: initialData?.instructions || \"\",\n      followUpDate: initialData?.followUpDate || \"\",\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"medicines\",\n  });\n\n  const handleSubmit = async (data: PrescriptionFormData) => {\n    setIsSubmitting(true);\n    try {\n      console.log('Prescription created:', data);\n      onSubmit?.(data);\n      toast({\n        title: isEditing ? \"Prescription Updated\" : \"Prescription Created\",\n        description: `Prescription for ${data.patientName} has been ${isEditing ? 'updated' : 'created'}.`,\n      });\n      if (!isEditing) {\n        form.reset();\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const addMedicine = () => {\n    append({ name: \"\", dosage: \"\", frequency: \"\", duration: \"\" });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{isEditing ? \"Edit Prescription\" : \"Create New Prescription\"}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"patientName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Patient Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Search or enter patient name\" data-testid=\"input-patient-name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium\">Medicines</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addMedicine}\n                  data-testid=\"button-add-medicine\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Medicine\n                </Button>\n              </div>\n\n              {fields.map((field, index) => (\n                <Card key={field.id} className=\"p-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name={`medicines.${index}.name`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Medicine Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Arnica Montana 30\" data-testid={`input-medicine-name-${index}`} {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name={`medicines.${index}.dosage`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Dosage</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"5 drops\" data-testid={`input-dosage-${index}`} {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                    <FormField\n                      control={form.control}\n                      name={`medicines.${index}.frequency`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Frequency</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"3 times daily\" data-testid={`input-frequency-${index}`} {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name={`medicines.${index}.duration`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Duration</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"15 days\" data-testid={`input-duration-${index}`} {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  {fields.length > 1 && (\n                    <div className=\"flex justify-end mt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => remove(index)}\n                        data-testid={`button-remove-medicine-${index}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Remove\n                      </Button>\n                    </div>\n                  )}\n                </Card>\n              ))}\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"instructions\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Additional Instructions</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Take on empty stomach, avoid spicy food, etc.\"\n                      className=\"resize-none\"\n                      data-testid=\"input-instructions\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"followUpDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Follow-up Date (Optional)</FormLabel>\n                  <FormControl>\n                    <Input type=\"date\" data-testid=\"input-follow-up-date\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full\"\n              data-testid=\"button-submit-prescription\"\n            >\n              {isSubmitting ? \"Creating...\" : isEditing ? \"Update Prescription\" : \"Create Prescription\"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n