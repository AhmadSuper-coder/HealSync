import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MessageSquare, Send, Bell, Users } from \"lucide-react\";\n\nconst messageFormSchema = z.object({\n  recipient: z.string().min(1, \"Recipient is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  message: z.string().min(1, \"Message is required\"),\n  type: z.string().min(1, \"Message type is required\"),\n});\n\ntype MessageFormData = z.infer<typeof messageFormSchema>;\n\ninterface Message {\n  id: string;\n  recipient: string;\n  subject: string;\n  type: \"reminder\" | \"health-tip\" | \"follow-up\" | \"appointment\";\n  status: \"sent\" | \"delivered\" | \"failed\";\n  sentAt: string;\n}\n\nexport default function Communication() {\n  const [activeTab, setActiveTab] = useState(\"send\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  // todo: remove mock functionality\n  const sentMessages: Message[] = [\n    {\n      id: \"1\",\n      recipient: \"Rajesh Sharma\",\n      subject: \"Appointment Reminder\",\n      type: \"reminder\",\n      status: \"delivered\",\n      sentAt: \"2024-01-15 10:30\",\n    },\n    {\n      id: \"2\",\n      recipient: \"All Patients\",\n      subject: \"Winter Health Tips\",\n      type: \"health-tip\",\n      status: \"sent\",\n      sentAt: \"2024-01-14 09:00\",\n    },\n    {\n      id: \"3\",\n      recipient: \"Priya Patel\",\n      subject: \"Follow-up Required\",\n      type: \"follow-up\",\n      status: \"delivered\",\n      sentAt: \"2024-01-13 14:15\",\n    },\n  ];\n\n  const form = useForm<MessageFormData>({\n    resolver: zodResolver(messageFormSchema),\n    defaultValues: {\n      recipient: \"\",\n      subject: \"\",\n      message: \"\",\n      type: \"\",\n    },\n  });\n\n  const handleSubmit = async (data: MessageFormData) => {\n    setIsSubmitting(true);\n    try {\n      console.log('Message sent:', data);\n      toast({\n        title: \"Message Sent\",\n        description: `Message sent to ${data.recipient} successfully.`,\n      });\n      form.reset();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return \"default\";\n      case \"sent\":\n        return \"secondary\";\n      case \"failed\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"reminder\":\n        return Bell;\n      case \"health-tip\":\n        return MessageSquare;\n      case \"follow-up\":\n        return Users;\n      default:\n        return MessageSquare;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Communication Center</h1>\n        <p className=\"text-muted-foreground\">\n          Send reminders, health tips, and communicate with patients.\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"send\" data-testid=\"tab-send-message\">Send Message</TabsTrigger>\n          <TabsTrigger value=\"history\" data-testid=\"tab-message-history\">Message History</TabsTrigger>\n          <TabsTrigger value=\"templates\" data-testid=\"tab-message-templates\">Templates</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"send\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Send Message</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"recipient\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Recipient</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Search patient or select 'All Patients'\" data-testid=\"input-recipient\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"type\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Message Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-message-type\">\n                                <SelectValue placeholder=\"Select message type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"reminder\">Appointment Reminder</SelectItem>\n                              <SelectItem value=\"health-tip\">Health Tip</SelectItem>\n                              <SelectItem value=\"follow-up\">Follow-up</SelectItem>\n                              <SelectItem value=\"announcement\">Clinic Announcement</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"subject\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Subject</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter message subject\" data-testid=\"input-subject\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"message\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Message</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Type your message here...\"\n                            className=\"min-h-32 resize-none\"\n                            data-testid=\"input-message\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-4\">\n                    <Button\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                      className=\"flex-1\"\n                      data-testid=\"button-send-message\"\n                    >\n                      <Send className=\"mr-2 h-4 w-4\" />\n                      {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        console.log('Schedule message for later');\n                        toast({\n                          title: \"Schedule Message\",\n                          description: \"Message scheduling feature coming soon.\",\n                        });\n                      }}\n                      data-testid=\"button-schedule-message\"\n                    >\n                      Schedule Later\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Message History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {sentMessages.map((message) => {\n                  const Icon = getTypeIcon(message.type);\n                  return (\n                    <div key={message.id} className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"p-2 bg-primary/10 rounded-lg\">\n                          <Icon className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{message.subject}</p>\n                          <p className=\"text-sm text-muted-foreground\">To: {message.recipient}</p>\n                          <p className=\"text-xs text-muted-foreground\">{message.sentAt}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge variant={getStatusColor(message.status) as any}>\n                          {message.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"templates\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {[\n              {\n                title: \"Appointment Reminder\",\n                description: \"Remind patients about upcoming appointments\",\n                template: \"Dear [Patient Name], this is a reminder for your appointment on [Date] at [Time].\",\n              },\n              {\n                title: \"Medicine Refill\",\n                description: \"Remind patients to refill their medicines\",\n                template: \"Dear [Patient Name], it's time to refill your homeopathic medicines.\",\n              },\n              {\n                title: \"Follow-up Required\",\n                description: \"Request patients to schedule follow-up\",\n                template: \"Dear [Patient Name], please schedule your follow-up appointment.\",\n              },\n              {\n                title: \"Health Tips\",\n                description: \"Share seasonal health tips\",\n                template: \"Stay healthy this season with these homeopathic tips...\",\n              },\n            ].map((template, index) => (\n              <Card key={index} className=\"hover-elevate cursor-pointer\">\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold mb-2\">{template.title}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">{template.description}</p>\n                  <p className=\"text-xs bg-muted p-2 rounded italic\">{template.template}</p>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"mt-3 w-full\"\n                    onClick={() => {\n                      form.setValue('subject', template.title);\n                      form.setValue('message', template.template);\n                      setActiveTab('send');\n                    }}\n                    data-testid={`button-use-template-${index}`}\n                  >\n                    Use Template\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n